#!/usr/bin/env perl
BEGIN { $ENV{MAPREDUCE_LOGGING} //= 1 }
use strict;
use warnings;
use lib 'lib';
use Pod::Usage;
use Getopt::Long qw(:config no_ignore_case);
use MapReduce::Process::Manager;

my $processes  = 1;
my $iterations = 1000;
my $memory     = 128;
my $daemon     = 0;
my $include    = '';
my $help       = 0;

GetOptions(
    'processes|p=i'  => \$processes,
    'iterations|i=i' => \$iterations,
    'memory|m=i'     => \$memory,
    'daemon|d'       => \$daemon,
    'include|I=s'    => \$include,
    'help|h'         => \$help,
) or pod2usage(1);

pod2usage(2) if $help;

my $command = shift(@ARGV) // '';

my $manager = MapReduce::Process::Manager->new(
    max_processes  => $processes,
    max_iterations => $iterations,
    max_memory     => $memory,
    daemon         => $daemon,
);

my $dispatch = {
    help  => sub { pod2usage(1)      },
    start => sub { $manager->start() },
    stop  => sub { $manager->stop()  },
};

pod2usage(1) if !exists $dispatch->{ lc $command };

$dispatch->{ lc $command }->();

exit 0;

__END__

=head1 NAME

mapreduce - Manage mapreduce worker processes

=head1 SYNOPSIS

mapreduce [options] <command>

 Options:
   -h --help          Usage information
   -p --processes     Maximum number of worker processes to run
   -i --iterations    Maximum iterations for a worker process before it is restarted
   -m --memory        Maximum memory usage for a worker process before it is restarted
   -d --daemon        Run in the background

=head1 COMMANDS

=over 8

=item B<start>

Start the MapReduce process manager.

=item B<stop>

Stop the MapReduce process manager.

=back

=head1 DESCRIPTION

=cut

